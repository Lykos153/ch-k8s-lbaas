https://kubernetes.io/docs/concepts/services-networking/network-policies/

rules should look like this:

table inet filter {
	chain forward {
		ct mark 0x1 and 0x1 ip saddr 93.202.0.0/16 accept; # from cidr
		ct mark 0x1 and 0x1 ip saddr 93.202.132.0/24 drop; # from except
		ct mark 0x1 and 0x1 drop; # if ingress rule exists, no matter if it has ipblock or not
	}
}

is order important?
apparently no:
> Network policies do not conflict; they are additive. If any policy or policies apply to a given pod for a given direction, the connections allowed in that direction from that pod is the union of what the applicable policies allow. Thus, order of evaluation does not affect the policy result.

policies can have: cidr (allowed ip range), except, ports

controller:
* gather all networkPolicies that apply to this pod. # is there a helper for that?
* if any(policies) has from.ipBlock: calc union of policies # is there a helper for that?
    # IMPORTANT how are unions calculated? (union of cidrs) + (union of except) or union of (cidr+except) ? the docs seem to suggest the latter: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#networkpolicyingressrule-v1-networking-k8s-io
  else: all traffic should be blocked. Do we even need to create a floating ip in this case?


== controller ==
problem: service has selector, networkpolicy has selector. Starting at the service, I need to find the policies that are relevant for the pods behind the endpoints.

ways to find pods from service:
1. start with service and list pods using selector (hopefully there is a function for that)
2. start with endpoint and get pods by IP

ways to find network policies:
1. do a reverse search from the pod: list all policies that apply to this pod IF there is a function for this
2. iterate through all network policies, get pods by selectors


idea for first draft:
* iterate through all networkpolicies
  * skip those that only have egress rules
  * store ingress ip blocks (or that there is none)
  * get pods by selector
  * iterate through pods
    * iterate through ips
      * store map: pod IP => ingress ip block
* add to endpoint handling:
	=> check if there is an entry for this IP inside the network policy map


TODOs:
* generator: don't create chain if there is no except
* formatting of nftables.conf
* handle default policy
  problem: we cannot have a default policy in the network-policy chain because the packet might be handled by a different policy. but if we have policies for it, we must drop it in the end.
  idea: add new mark to every packet that has seen at least one network policy. then in the end drop all thus marked


Open questions:  
* I don't want to be informed about pods. Just need to list them
* Is this the way to deep copy structs in go?
* what about the mask? what's it for and do I need to add `npmark-mask`?
* what is the field 'Policy' in the model for?
* where to put the test script. own PR?
~
~
~
~
~
~
